<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>五子棋</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="game">
    <h1>五子棋</h1>
    <div id="board"></div>
    <button id="restart">重新開始</button>
  </div>
  <script src="script.js"></script>
</body>
</html>


body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background-color: #f0f0f0;
  font-family: Arial, sans-serif;
}

#game {
  text-align: center;
}

#board {
  display: grid;
  grid-template-columns: repeat(15, 40px);
  grid-template-rows: repeat(15, 40px);
  gap: 1px;
  margin: 20px auto;
  border: 2px solid #333;
}

.cell {
  width: 40px;
  height: 40px;
  background-color: #fff;
  border: 1px solid #ccc;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  cursor: pointer;
}

.cell.x::before {
  content: 'X';
  color: blue;
}

.cell.o::before {
  content: 'O';
  color: red;
}

#restart {
  margin-top: 20px;
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
}

const boardSize = 15;
const winCondition = 5;
let board = [];
let currentPlayer = 'x';
const boardElement = document.getElementById('board');
const restartButton = document.getElementById('restart');

function initBoard() {
  board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(null));
  boardElement.innerHTML = '';
  for (let i = 0; i < boardSize * boardSize; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    cell.dataset.index = i;
    cell.addEventListener('click', handleCellClick);
    boardElement.appendChild(cell);
  }
}

function handleCellClick(event) {
  const index = event.target.dataset.index;
  const row = Math.floor(index / boardSize);
  const col = index % boardSize;

  if (board[row][col] || checkWin()) return;

  board[row][col] = currentPlayer;
  event.target.classList.add(currentPlayer);

  if (checkWin()) {
    setTimeout(() => alert(`${currentPlayer.toUpperCase()}贏了！`), 100);
    return;
  }

  currentPlayer = currentPlayer === 'x' ? 'o' : 'x';
}

function checkWin() {
  const directions = [
    { x: 0, y: 1 },
    { x: 1, y: 0 },
    { x: 1, y: 1 },
    { x: 1, y: -1 }
  ];

  for (let row = 0; row < boardSize; row++) {
    for (let col = 0; col < boardSize; col++) {
      if (board[row][col]) {
        for (let { x, y } of directions) {
          if (checkDirection(row, col, x, y)) return true;
        }
      }
    }
  }
  return false;
}

function checkDirection(row, col, xDir, yDir) {
  const start = board[row][col];
  let count = 0;

  for (let i = 0; i < winCondition; i++) {
    const r = row + i * xDir;
    const c = col + i * yDir;

    if (r < 0 || r >= boardSize || c < 0 || c >= boardSize || board[r][c] !== start) {
      return false;
    }
    count++;
  }
  return count === winCondition;
}

restartButton.addEventListener('click', initBoard);

initBoard();

